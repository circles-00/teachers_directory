// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

enum Role {
  TEACHER
  SCHOOL
  GENERAL
  ADMIN
}

model User {
  id                        String   @id @default(cuid())
  email                     String   @unique
  password                  String
  firstName                 String
  lastName                  String
  verificationCode          Int
  verificationCodeExpiresAt DateTime
  verified                  Boolean  @default(false)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  role                      Role
  Teacher                   Teacher?

  @@map(name: "users")
}

model Teacher {
  id             String                 @id @default(cuid())
  user           User                   @relation(fields: [userId], references: [id])
  userId         String                 @unique
  title          String                 @default("")
  profilePhoto   String?
  about          String?
  gender         String                 @default("")
  dateOfBirth    String                 @default("")
  location       TeacherLocation?
  subjects       TeacherSubject[]
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @default(now()) @updatedAt
  qualifications TeacherQualification[]
  achievements   TeacherAchievement[]
  experience     TeacherExperience?
  socialLinks    TeacherSocialLink[]
  availability   TeacherAvailability?
  otherServices  TeacherOtherService[]
  badges         TeacherBadge?

  @@map(name: "teachers")
}

model TeacherLocation {
  id               String  @id @default(cuid())
  teacher          Teacher @relation(fields: [teacherId], references: [id])
  teacherId        String  @unique
  latitude         Float?
  longitude        Float?
  streetAddress    String
  secondaryAddress String?
  city             String
  postCode         String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map(name: "teachers_location")
}

model TeacherSubject {
  id            String   @id @default(cuid())
  teacher       Teacher  @relation(fields: [teacherId], references: [id])
  teacherId     String
  subjectName   String
  level         String
  examBoard     String?
  isMainSubject Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map(name: "teachers_subject") // TODO: Rename to teachers_subjects
}

model TeacherQualification {
  id         String   @id @default(cuid())
  teacher    Teacher  @relation(fields: [teacherId], references: [id])
  teacherId  String
  university String
  course     String
  grade      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map(name: "teachers_qualifications")
}

model TeacherAchievement {
  id          String   @id @default(cuid())
  teacher     Teacher  @relation(fields: [teacherId], references: [id])
  teacherId   String
  title       String
  description String
  grade       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map(name: "teachers_achievements")
}

model TeacherExperience {
  id        String  @id @default(cuid())
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId String  @unique

  role          String
  subRole       String
  teachingTime  String
  qualification Boolean
  degree        Boolean
  examiner      Boolean
  examBoard     String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "teachers_experience")
}

model TeacherSocialLink {
  id        String  @id @default(cuid())
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId String

  platform String
  url      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "teachers_social_links")
}

model TeacherAvailability {
  id        String  @id @default(cuid())
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId String  @unique

  availabilityTable Json
  availableNow      Boolean
  startDate         String?
  files             File[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "teachers_availability")
}

model File {
  id                    String               @id @default(cuid())
  teacherAvailablity    TeacherAvailability? @relation(fields: [teacherAvailabilityId], references: [id])
  teacherAvailabilityId String?

  teacherBadge   TeacherBadge? @relation(fields: [teacherBadgeId], references: [id])
  teacherBadgeId String?

  name    String
  content String

  fileType String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "files")
}

model TeacherOtherService {
  id        String  @id @default(cuid())
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId String

  title       String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "teachers_other_services")
}

model TeacherBadge {
  id String @id @default(cuid())

  files File[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId String  @unique

  @@map(name: "teachers_badges")
}
